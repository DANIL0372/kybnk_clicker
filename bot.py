import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
import sqlite3
import datetime
import time

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)


class FixedClickerBot:
    def __init__(self, token):
        self.token = token
        self.updater = Updater(token)
        self.dispatcher = self.updater.dispatcher
        self.setup_handlers()
        self.init_database()

    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫"""
        conn = sqlite3.connect('clicker.db')
        cursor = conn.cursor()

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users —Å –≤—Å–µ–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                balance INTEGER DEFAULT 100,
                level INTEGER DEFAULT 1,
                clicks INTEGER DEFAULT 0,
                last_click TEXT,
                referrals INTEGER DEFAULT 0,
                passive_income INTEGER DEFAULT 0,
                last_passive_claim TEXT,
                created_at TEXT
            )
        ''')

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É upgrades
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS upgrades (
                user_id INTEGER,
                upgrade_type TEXT,
                level INTEGER DEFAULT 1,
                PRIMARY KEY (user_id, upgrade_type)
            )
        ''')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ username –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        try:
            cursor.execute("SELECT username FROM users LIMIT 1")
        except sqlite3.OperationalError:
            cursor.execute("ALTER TABLE users ADD COLUMN username TEXT")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        columns_to_check = ['last_passive_claim', 'passive_income']
        for column in columns_to_check:
            try:
                cursor.execute(f"SELECT {column} FROM users LIMIT 1")
            except sqlite3.OperationalError:
                if column == 'last_passive_claim':
                    cursor.execute(f"ALTER TABLE users ADD COLUMN {column} TEXT")
                else:
                    cursor.execute(f"ALTER TABLE users ADD COLUMN {column} INTEGER DEFAULT 0")

        conn.commit()
        conn.close()

    def setup_handlers(self):
        self.dispatcher.add_handler(CommandHandler("start", self.start))
        self.dispatcher.add_handler(CommandHandler("game", self.game))
        self.dispatcher.add_handler(CommandHandler("profile", self.profile))
        self.dispatcher.add_handler(CommandHandler("shop", self.shop))
        self.dispatcher.add_handler(CallbackQueryHandler(self.handle_callback, pattern='^.*$'))

    def get_user_data(self, user_id):
        conn = sqlite3.connect('clicker.db')
        cursor = conn.cursor()

        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        user = cursor.fetchone()

        if not user:
            now = datetime.datetime.now().isoformat()
            cursor.execute('''
                INSERT INTO users (user_id, username, balance, level, clicks, passive_income, created_at, last_passive_claim)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (user_id, None, 100, 1, 0, 0, now, now))
            conn.commit()
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
            user = cursor.fetchone()

        # –ü–æ–ª—É—á–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('SELECT upgrade_type, level FROM upgrades WHERE user_id = ?', (user_id,))
        upgrades = {row[0]: row[1] for row in cursor.fetchall()}

        conn.close()
        return user, upgrades

    def update_user(self, user_id, updates):
        conn = sqlite3.connect('clicker.db')
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        cursor.execute("PRAGMA table_info(users)")
        existing_columns = [column[1] for column in cursor.fetchall()]

        valid_updates = {}
        for key, value in updates.items():
            if key in existing_columns:
                valid_updates[key] = value
            else:
                print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ö–æ–ª–æ–Ω–∫–∞ {key} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ users")

        if valid_updates:
            set_clause = ', '.join([f"{key} = ?" for key in valid_updates.keys()])
            values = list(valid_updates.values())
            values.append(user_id)

            cursor.execute(f'UPDATE users SET {set_clause} WHERE user_id = ?', values)

        conn.commit()
        conn.close()

    def add_upgrade(self, user_id, upgrade_type, level=1):
        conn = sqlite3.connect('clicker.db')
        cursor = conn.cursor()

        cursor.execute('''
            INSERT OR REPLACE INTO upgrades (user_id, upgrade_type, level)
            VALUES (?, ?, ?)
        ''', (user_id, upgrade_type, level))

        conn.commit()
        conn.close()

    def start(self, update: Update, context: CallbackContext):
        user = update.effective_user
        user_data, upgrades = self.get_user_data(user.id)

        # –û–±–Ω–æ–≤–ª—è–µ–º username (–µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        self.update_user(user.id, {'username': user.username})

        # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
        if context.args:
            try:
                referrer_id = int(context.args[0])
                if referrer_id != user.id:
                    referrer_data, _ = self.get_user_data(referrer_id)
                    self.update_user(referrer_id, {
                        'balance': referrer_data[2] + 100,
                        'referrals': referrer_data[6] + 1
                    })
                    # –ë–æ–Ω—É—Å –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    self.update_user(user.id, {'balance': user_data[2] + 50})
            except ValueError:
                pass

        welcome_text = f"""
üéÆ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∞–≥–∞–∑–∏–Ω –ö–ª–∏–∫–µ—Ä!*

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

*–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π —Ç–æ–∫–µ–Ω—ã –∏ –ø–æ–ª—É—á–∞–π —Å–∫–∏–¥–∫–∏* –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –æ–¥–µ–∂–¥—ã –∏ –∫—Ä–æ—Å—Å–æ–≤–æ–∫!

üíé *–¢–≤–æ–π –±–∞–ª–∞–Ω—Å:* {user_data[2]} —Ç–æ–∫–µ–Ω–æ–≤
‚≠ê *–£—Ä–æ–≤–µ–Ω—å:* {user_data[3]}
üë• *–†–µ—Ñ–µ—Ä–∞–ª—ã:* {user_data[6]}

*–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:*
‚Ä¢ –ù–∞–∂–∏–º–∞–π üñ±Ô∏è *–ö–ª–∏–∫!* –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
‚Ä¢ üè™ –û—Ç–∫—Ä—ã–≤–∞–π –º–∞–≥–∞–∑–∏–Ω –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π
‚Ä¢ üë• –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∑–∞ –±–æ–Ω—É—Å—ã
‚Ä¢ üí§ –†–∞–∑–±–ª–æ–∫–∏—Ä—É–π –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥

*–ö—É—Ä—Å –æ–±–º–µ–Ω–∞:* 1000 —Ç–æ–∫–µ–Ω–æ–≤ = 100 —Ä—É–±–ª–µ–π —Å–∫–∏–¥–∫–∏
        """

        keyboard = [
            [InlineKeyboardButton("üñ±Ô∏è –ö–ª–∏–∫!", callback_data='click_main')],
            [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile'),
             InlineKeyboardButton("üè™ –ú–∞–≥–∞–∑–∏–Ω", callback_data='shop')],
            [InlineKeyboardButton("üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data='referral'),
             InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
            [InlineKeyboardButton("üí§ –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥", callback_data='passive')]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

    def profile(self, update: Update, context: CallbackContext):
        user = update.effective_user
        user_data, upgrades = self.get_user_data(user.id)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥
        try:
            last_claim = datetime.datetime.fromisoformat(
                user_data[9] if user_data[9] else datetime.datetime.now().isoformat())
        except:
            last_claim = datetime.datetime.now()

        now = datetime.datetime.now()
        hours_passed = (now - last_claim).total_seconds() / 3600
        passive_earned = hours_passed * user_data[7]

        profile_text = f"""
üë§ *–ü—Ä–æ—Ñ–∏–ª—å {user.first_name}*

üíé *–ë–∞–ª–∞–Ω—Å:* {user_data[2]:,} —Ç–æ–∫–µ–Ω–æ–≤
‚≠ê *–£—Ä–æ–≤–µ–Ω—å:* {user_data[3]}
üñ±Ô∏è *–í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤:* {user_data[4]:,}
üë• *–†–µ—Ñ–µ—Ä–∞–ª—ã:* {user_data[6]}
üí§ *–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥:* {user_data[7]} —Ç–æ–∫–µ–Ω–æ–≤/—á–∞—Å

*–î–æ—Å—Ç—É–ø–Ω–æ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é:* {passive_earned:.1f} —Ç–æ–∫–µ–Ω–æ–≤

*–ö—É—Ä—Å –æ–±–º–µ–Ω–∞:* 
1000 —Ç–æ–∫–µ–Ω–æ–≤ = 100 —Ä—É–±–ª–µ–π —Å–∫–∏–¥–∫–∏
5000 —Ç–æ–∫–µ–Ω–æ–≤ = 600 —Ä—É–±–ª–µ–π —Å–∫–∏–¥–∫–∏
        """

        keyboard = [
            [InlineKeyboardButton("üí§ –ó–∞–±—Ä–∞—Ç—å –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥", callback_data='claim_passive')],
            [InlineKeyboardButton("üí≥ –û–±–º–µ–Ω—è—Ç—å —Ç–æ–∫–µ–Ω—ã", callback_data='exchange')],
            [InlineKeyboardButton("üéÆ –ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—É", callback_data='main_menu')]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.callback_query:
            update.callback_query.edit_message_text(profile_text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            update.message.reply_text(profile_text, reply_markup=reply_markup, parse_mode='Markdown')

    def shop(self, update: Update, context: CallbackContext):
        user = update.effective_user
        user_data, upgrades = self.get_user_data(user.id)

        shop_text = f"""
üè™ *–ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π*

üíé *–í–∞—à –±–∞–ª–∞–Ω—Å:* {user_data[2]:,} —Ç–æ–∫–µ–Ω–æ–≤

*–î–æ—Å—Ç—É–ø–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:*

üñ±Ô∏è *–£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª–∏–∫* (–£—Ä–æ–≤–µ–Ω—å {upgrades.get('click_power', 1)})
–¶–µ–Ω–∞: {100 * upgrades.get('click_power', 1)} —Ç–æ–∫–µ–Ω–æ–≤
+1 —Ç–æ–∫–µ–Ω –∑–∞ –∫–ª–∏–∫

üí§ *–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥* (–£—Ä–æ–≤–µ–Ω—å {upgrades.get('passive', 1)})
–¶–µ–Ω–∞: {200 * upgrades.get('passive', 1)} —Ç–æ–∫–µ–Ω–æ–≤
+1 —Ç–æ–∫–µ–Ω/—á–∞—Å

‚ö° *–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä* (–£—Ä–æ–≤–µ–Ω—å {upgrades.get('autoclick', 0)})
–¶–µ–Ω–∞: {500 * (upgrades.get('autoclick', 0) + 1)} —Ç–æ–∫–µ–Ω–æ–≤
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–ª–∏–∫–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        """

        keyboard = [
            [InlineKeyboardButton("üñ±Ô∏è –£–ª—É—á—à–∏—Ç—å –∫–ª–∏–∫", callback_data='buy_click_power')],
            [InlineKeyboardButton("üí§ –£–ª—É—á—à–∏—Ç—å –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥", callback_data='buy_passive')],
            [InlineKeyboardButton("‚ö° –ö—É–ø–∏—Ç—å –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä", callback_data='buy_autoclick')],
            [InlineKeyboardButton("üéÆ –ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—É", callback_data='main_menu')]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.callback_query:
            update.callback_query.edit_message_text(shop_text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            update.message.reply_text(shop_text, reply_markup=reply_markup, parse_mode='Markdown')

    def handle_callback(self, update: Update, context: CallbackContext):
        query = update.callback_query
        user = query.from_user
        user_data, upgrades = self.get_user_data(user.id)

        if query.data == 'click_main':
            # –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∫–ª–∏–∫
            base_reward = 1
            click_power_bonus = upgrades.get('click_power', 1) - 1
            level_bonus = user_data[3] * 0.2
            total_reward = base_reward + click_power_bonus + level_bonus

            new_balance = user_data[2] + total_reward
            new_clicks = user_data[4] + 1

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
            new_level = user_data[3]
            if new_clicks >= user_data[3] * 150:
                new_level += 1
                level_up_text = f"\nüéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è {new_level}!*"
            else:
                level_up_text = ""

            self.update_user(user.id, {
                'balance': new_balance,
                'clicks': new_clicks,
                'level': new_level,
                'last_click': datetime.datetime.now().isoformat()
            })

            response_text = f"""
üíé *+{total_reward:.1f} —Ç–æ–∫–µ–Ω–æ–≤!*

üí∞ *–ë–∞–ª–∞–Ω—Å:* {new_balance:.1f} üíé
‚≠ê *–£—Ä–æ–≤–µ–Ω—å:* {new_level}
üéØ *–ö–ª–∏–∫–æ–≤:* {new_clicks:,}
{level_up_text}

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üöÄ
            """

            keyboard = [
                [InlineKeyboardButton("üñ±Ô∏è –ö–ª–∏–∫–Ω—É—Ç—å –µ—â–µ!", callback_data='click_main')],
                [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile'),
                 InlineKeyboardButton("üè™ –ú–∞–≥–∞–∑–∏–Ω", callback_data='shop')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            query.edit_message_text(response_text, reply_markup=reply_markup, parse_mode='Markdown')

        elif query.data == 'profile':
            self.profile(update, context)

        elif query.data == 'shop':
            self.shop(update, context)

        elif query.data == 'main_menu':
            self.start(update, context)

        elif query.data == 'claim_passive':
            # –ó–∞–±–∏—Ä–∞–µ–º –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥
            try:
                last_claim = datetime.datetime.fromisoformat(
                    user_data[9] if user_data[9] else datetime.datetime.now().isoformat())
            except:
                last_claim = datetime.datetime.now()

            now = datetime.datetime.now()
            hours_passed = (now - last_claim).total_seconds() / 3600
            passive_earned = hours_passed * user_data[7]

            if passive_earned > 0:
                new_balance = user_data[2] + passive_earned
                self.update_user(user.id, {
                    'balance': new_balance,
                    'last_passive_claim': now.isoformat()
                })

                response_text = f"""
üí§ *–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –ø–æ–ª—É—á–µ–Ω!*

üíé *–ü–æ–ª—É—á–µ–Ω–æ:* {passive_earned:.1f} —Ç–æ–∫–µ–Ω–æ–≤
üí∞ *–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:* {new_balance:.1f} üíé

–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ —Å–Ω–æ–≤–∞ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è!
                """
            else:
                response_text = "üí§ –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –µ—â–µ –Ω–µ –Ω–∞–∫–æ–ø–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ!"

            keyboard = [[InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile')]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            query.edit_message_text(response_text, reply_markup=reply_markup, parse_mode='Markdown')

        elif query.data.startswith('buy_'):
            upgrade_type = query.data[4:]  # 'click_power', 'passive', 'autoclick'
            current_level = upgrades.get(upgrade_type, 1 if upgrade_type != 'autoclick' else 0)

            if upgrade_type == 'click_power':
                price = 100 * current_level
            elif upgrade_type == 'passive':
                price = 200 * current_level
            elif upgrade_type == 'autoclick':
                price = 500 * (current_level + 1)

            if user_data[2] >= price:
                # –ü–æ–∫—É–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è
                new_balance = user_data[2] - price
                new_level = current_level + 1

                self.update_user(user.id, {'balance': new_balance})
                self.add_upgrade(user.id, upgrade_type, new_level)

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if upgrade_type == 'passive':
                    self.update_user(user.id, {'passive_income': new_level})

                response_text = f"""
‚úÖ *–£–ª—É—á—à–µ–Ω–∏–µ –∫—É–ø–ª–µ–Ω–æ!*

üéä *{upgrade_type.replace('_', ' ').title()}* —Ç–µ–ø–µ—Ä—å —É—Ä–æ–≤–µ–Ω—å {new_level}
üíé *–ü–æ—Ç—Ä–∞—á–µ–Ω–æ:* {price} —Ç–æ–∫–µ–Ω–æ–≤
üí∞ *–û—Å—Ç–∞–ª–æ—Å—å:* {new_balance} —Ç–æ–∫–µ–Ω–æ–≤
                """
            else:
                response_text = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤! –ù—É–∂–Ω–æ {price}, –∞ —É –≤–∞—Å {user_data[2]}"

            keyboard = [[InlineKeyboardButton("üè™ –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data='shop')]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            query.edit_message_text(response_text, reply_markup=reply_markup, parse_mode='Markdown')

        elif query.data == 'referral':
            bot_username = context.bot.username
            referral_link = f"https://t.me/{bot_username}?start={user.id}"

            referral_text = f"""
üë• *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞*

–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!

üîó *–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:*
`{referral_link}`

üéÅ *–ë–æ–Ω—É—Å—ã:*
‚Ä¢ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ: 100 —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞
‚Ä¢ –î—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç: 50 —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

üë• *–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π:* {user_data[6]}
            """

            keyboard = [[InlineKeyboardButton("üéÆ –ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—É", callback_data='main_menu')]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            query.edit_message_text(referral_text, reply_markup=reply_markup, parse_mode='Markdown')

        query.answer()

    def run(self):
        self.updater.start_polling()
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! üöÄ")
        self.updater.idle()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è Railway)
    import os

    TOKEN = os.environ.get('BOT_TOKEN', '7730710795:AAFiL2yQyd49Vm7mcUr7idbG1b59jozhGaU')

    if TOKEN == 'YOUR_BOT_TOKEN_HERE':
        print("‚ùå –û—à–∏–±–∫–∞: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
    else:
        bot = FixedClickerBot(TOKEN)
        bot.run()